/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    UPHL-BioNGS/Donut_Falls Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
  sequencing_summary    = null
  input                 = null
  sample_sheet          = params.input
  assembler             = 'flye'
  outdir                = 'donut_falls'
  test                  = null
  config_file           = null

  // for linting that probably doesn't do anything
  // Config options
  config_profile_name        = null
  config_profile_description = null
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  config_profile_contact     = null
  config_profile_url         = null
}


// Load nf-core custom profiles from different Institutions
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"

//########## Setting Profiles ##########


manifest {
  mainScript                    = 'main.nf'
  name                          = 'UPHL-BioNGS/Donut_Falls'
  author                        = 'Erin Young'
  homePage                      = 'https://github.com/UPHL-BioNGS/Donut_Falls'
  description                   = "De novo assembly of long-reads"
  version                       = '1.16.25280'
  nextflowVersion               = '>=24.10.3'
  defaultBranch                 = 'main'
}

//########## Setting the Profile ##########
profiles {
  docker {
    docker.enabled              = true
    docker.runOptions           = "-u \$(id -u):\$(id -g)"
  }
  singularity {
    singularity.enabled         = true
    singularity.autoMounts      = true
  }
  test {
    params.test                 = true    
  }
  campy {
    includeConfig './configs/1_5M.config'
  }
  slurm {
    includeConfig './configs/slurm.config'
  }
}

//########## Files               ##########

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

//########## Default resources   ##########

process {
    //maxRetries = 1
    //maxErrors  = '-1'
    //errorStrategy = { task.attempt < 2 ? 'retry' : 'ignore'}

    withLabel:process_single {
      cpus   = { 1 }
      memory = { 6.GB }
      time   = { 30.m * task.attempt}
    }
    withLabel:process_low {
        cpus   = { 2     }
        memory = { 12.GB }
        time   = { 2.h  * task.attempt }
    }
    withLabel:process_medium {
        cpus   = { 6     }
        memory = { 36.GB }
        time   = { 4.h   }
    }
    withLabel:process_high {
        cpus   = { 12    }
        memory = { 72.GB }
        time   = { 16.h  * task.attempt }
    }
    withLabel:process_long {
        time   = { 20.h  * task.attempt }
    }
    withLabel:process_high_memory {
        memory = { 200.GB * task.attempt }
    }
}
